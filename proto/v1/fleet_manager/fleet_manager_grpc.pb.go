// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/v1/fleet_manager/fleet_manager.proto

package fleet_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FleetManager_HerdCommandStream_FullMethodName    = "/v1.fleet_manager.FleetManager/HerdCommandStream"
	FleetManager_HerdServices_FullMethodName         = "/v1.fleet_manager.FleetManager/HerdServices"
	FleetManager_HerdRobotTelemetry_FullMethodName   = "/v1.fleet_manager.FleetManager/HerdRobotTelemetry"
	FleetManager_HerdTelemetry_FullMethodName        = "/v1.fleet_manager.FleetManager/HerdTelemetry"
	FleetManager_HerdHealthCheck_FullMethodName      = "/v1.fleet_manager.FleetManager/HerdHealthCheck"
	FleetManager_DockerStatsTelemetry_FullMethodName = "/v1.fleet_manager.FleetManager/DockerStatsTelemetry"
)

// FleetManagerClient is the client API for FleetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetManagerClient interface {
	HerdCommandStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandSteamRequest, CommandSteamRespose], error)
	HerdServices(ctx context.Context, in *HerdServiceRequest, opts ...grpc.CallOption) (*HerdServiceResponse, error)
	HerdRobotTelemetry(ctx context.Context, in *RobotTelemetryData, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RobotTelemetryResponse], error)
	HerdTelemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HerdTelemetryReqest, HerdTelemetryResponse], error)
	HerdHealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HealthCheckRequest, HealthCheckResponse], error)
	DockerStatsTelemetry(ctx context.Context, in *DockerTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DockerTelemetryResponse], error)
}

type fleetManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetManagerClient(cc grpc.ClientConnInterface) FleetManagerClient {
	return &fleetManagerClient{cc}
}

func (c *fleetManagerClient) HerdCommandStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandSteamRequest, CommandSteamRespose], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[0], FleetManager_HerdCommandStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandSteamRequest, CommandSteamRespose]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdCommandStreamClient = grpc.BidiStreamingClient[CommandSteamRequest, CommandSteamRespose]

func (c *fleetManagerClient) HerdServices(ctx context.Context, in *HerdServiceRequest, opts ...grpc.CallOption) (*HerdServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HerdServiceResponse)
	err := c.cc.Invoke(ctx, FleetManager_HerdServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerClient) HerdRobotTelemetry(ctx context.Context, in *RobotTelemetryData, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RobotTelemetryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[1], FleetManager_HerdRobotTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RobotTelemetryData, RobotTelemetryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdRobotTelemetryClient = grpc.ServerStreamingClient[RobotTelemetryResponse]

func (c *fleetManagerClient) HerdTelemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HerdTelemetryReqest, HerdTelemetryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[2], FleetManager_HerdTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HerdTelemetryReqest, HerdTelemetryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdTelemetryClient = grpc.ClientStreamingClient[HerdTelemetryReqest, HerdTelemetryResponse]

func (c *fleetManagerClient) HerdHealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HealthCheckRequest, HealthCheckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[3], FleetManager_HerdHealthCheck_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HealthCheckRequest, HealthCheckResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdHealthCheckClient = grpc.BidiStreamingClient[HealthCheckRequest, HealthCheckResponse]

func (c *fleetManagerClient) DockerStatsTelemetry(ctx context.Context, in *DockerTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DockerTelemetryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FleetManager_ServiceDesc.Streams[4], FleetManager_DockerStatsTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DockerTelemetryRequest, DockerTelemetryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_DockerStatsTelemetryClient = grpc.ServerStreamingClient[DockerTelemetryResponse]

// FleetManagerServer is the server API for FleetManager service.
// All implementations must embed UnimplementedFleetManagerServer
// for forward compatibility.
type FleetManagerServer interface {
	HerdCommandStream(grpc.BidiStreamingServer[CommandSteamRequest, CommandSteamRespose]) error
	HerdServices(context.Context, *HerdServiceRequest) (*HerdServiceResponse, error)
	HerdRobotTelemetry(*RobotTelemetryData, grpc.ServerStreamingServer[RobotTelemetryResponse]) error
	HerdTelemetry(grpc.ClientStreamingServer[HerdTelemetryReqest, HerdTelemetryResponse]) error
	HerdHealthCheck(grpc.BidiStreamingServer[HealthCheckRequest, HealthCheckResponse]) error
	DockerStatsTelemetry(*DockerTelemetryRequest, grpc.ServerStreamingServer[DockerTelemetryResponse]) error
	mustEmbedUnimplementedFleetManagerServer()
}

// UnimplementedFleetManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFleetManagerServer struct{}

func (UnimplementedFleetManagerServer) HerdCommandStream(grpc.BidiStreamingServer[CommandSteamRequest, CommandSteamRespose]) error {
	return status.Errorf(codes.Unimplemented, "method HerdCommandStream not implemented")
}
func (UnimplementedFleetManagerServer) HerdServices(context.Context, *HerdServiceRequest) (*HerdServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HerdServices not implemented")
}
func (UnimplementedFleetManagerServer) HerdRobotTelemetry(*RobotTelemetryData, grpc.ServerStreamingServer[RobotTelemetryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method HerdRobotTelemetry not implemented")
}
func (UnimplementedFleetManagerServer) HerdTelemetry(grpc.ClientStreamingServer[HerdTelemetryReqest, HerdTelemetryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method HerdTelemetry not implemented")
}
func (UnimplementedFleetManagerServer) HerdHealthCheck(grpc.BidiStreamingServer[HealthCheckRequest, HealthCheckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method HerdHealthCheck not implemented")
}
func (UnimplementedFleetManagerServer) DockerStatsTelemetry(*DockerTelemetryRequest, grpc.ServerStreamingServer[DockerTelemetryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DockerStatsTelemetry not implemented")
}
func (UnimplementedFleetManagerServer) mustEmbedUnimplementedFleetManagerServer() {}
func (UnimplementedFleetManagerServer) testEmbeddedByValue()                      {}

// UnsafeFleetManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetManagerServer will
// result in compilation errors.
type UnsafeFleetManagerServer interface {
	mustEmbedUnimplementedFleetManagerServer()
}

func RegisterFleetManagerServer(s grpc.ServiceRegistrar, srv FleetManagerServer) {
	// If the following call pancis, it indicates UnimplementedFleetManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FleetManager_ServiceDesc, srv)
}

func _FleetManager_HerdCommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FleetManagerServer).HerdCommandStream(&grpc.GenericServerStream[CommandSteamRequest, CommandSteamRespose]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdCommandStreamServer = grpc.BidiStreamingServer[CommandSteamRequest, CommandSteamRespose]

func _FleetManager_HerdServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HerdServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).HerdServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetManager_HerdServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).HerdServices(ctx, req.(*HerdServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManager_HerdRobotTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RobotTelemetryData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FleetManagerServer).HerdRobotTelemetry(m, &grpc.GenericServerStream[RobotTelemetryData, RobotTelemetryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdRobotTelemetryServer = grpc.ServerStreamingServer[RobotTelemetryResponse]

func _FleetManager_HerdTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FleetManagerServer).HerdTelemetry(&grpc.GenericServerStream[HerdTelemetryReqest, HerdTelemetryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdTelemetryServer = grpc.ClientStreamingServer[HerdTelemetryReqest, HerdTelemetryResponse]

func _FleetManager_HerdHealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FleetManagerServer).HerdHealthCheck(&grpc.GenericServerStream[HealthCheckRequest, HealthCheckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_HerdHealthCheckServer = grpc.BidiStreamingServer[HealthCheckRequest, HealthCheckResponse]

func _FleetManager_DockerStatsTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DockerTelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FleetManagerServer).DockerStatsTelemetry(m, &grpc.GenericServerStream[DockerTelemetryRequest, DockerTelemetryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FleetManager_DockerStatsTelemetryServer = grpc.ServerStreamingServer[DockerTelemetryResponse]

// FleetManager_ServiceDesc is the grpc.ServiceDesc for FleetManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.fleet_manager.FleetManager",
	HandlerType: (*FleetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HerdServices",
			Handler:    _FleetManager_HerdServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HerdCommandStream",
			Handler:       _FleetManager_HerdCommandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HerdRobotTelemetry",
			Handler:       _FleetManager_HerdRobotTelemetry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HerdTelemetry",
			Handler:       _FleetManager_HerdTelemetry_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HerdHealthCheck",
			Handler:       _FleetManager_HerdHealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DockerStatsTelemetry",
			Handler:       _FleetManager_DockerStatsTelemetry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/v1/fleet_manager/fleet_manager.proto",
}
