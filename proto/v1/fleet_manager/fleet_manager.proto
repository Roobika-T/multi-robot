syntax = "proto3";

package v1.fleet_manager;

option go_package = "github.com/GOAT-Robotics/gtstudio-proto/protos/v1/fleet_manager";

service FleetManager {

    rpc HerdCommandStream(stream CommandSteamRequest) returns (stream CommandSteamRespose) {} // Fleet manager (GT-server and each Docker service)

    rpc HerdServices(HerdServiceRequest) returns (HerdServiceResponse) {}  // GT-server to fleet manager

    rpc HerdRobotTelemetry(RobotTelemetryData) returns (stream RobotTelemetryResponse) {} // Fleet manager (GT-server and each Docker service)

    rpc HerdTelemetry(stream HerdTelemetryReqest) returns (HerdTelemetryResponse) {} // HerdIQ -> Fleet manager -> GT-server

    rpc HerdHealthCheck(stream HealthCheckRequest) returns (stream HealthCheckResponse) {}

    rpc DockerStatsTelemetry(DockerTelemetryRequest) returns (stream DockerTelemetryResponse) {}

}

// Command stream service
enum CommandStreamCommands {
    COMMAND_STREAM_UNKNOWN = 0;
    FLOW_EXECUTE = 1;
    FLOW_CANCEL = 2;
    ROBOT_LIST = 3;
    GET_CONFIGS = 4;
    NAVIGATION = 5; 
    TRIGGER = 6;
    BLOCK = 7;
    UPDATE_CONFIG = 8;
    LOCALIZATION = 9;
    MAP = 10;
    LANE = 11;
    SETTINGS = 12;
}

enum CommandStreamActions {
    COMMAND_ACTION_UNKNOWN = 0;
    CANCEL_GOAL = 1;
    SEND_GOAL = 2;
    HOME = 3;
    CHARGER = 4;
    GOAT_RESPONSE = 5;
    PAUSE_GOAL = 6;
    RESUME_GOAL = 7;
    BLOCK_ROBOT = 8;
    UNBLOCK_ROBOT = 9;
    SWITCH_MAP = 10;
    UPDATE_MAP = 11;
    GET_MAP = 12;
    BLOCK_LANE = 13;
    UNBLOCK_LANE = 14;
    UPDATE_SPEED = 15;
    RESET_SPEED = 16;
    UPDATE_VOLUME = 17;
    UPDATE_GOAL = 18;
    UPDATE_NAVIGATION = 19;
    UPDATE_CUSTOM_TASK = 20;
}

message CommandSteamRequest {
    string slug_name = 1;
    CommandStreamCommands command = 2;
    CommandStreamActions action = 3;
    string device_id = 4;
    string robot = 5;
    string data = 6;
    bool status = 7;
    string message = 8;
    string request_id = 9;
    string organization = 10;
}

message CommandSteamRespose {
    string slug_name = 1;
    CommandStreamCommands command = 2;
    CommandStreamActions action = 3;
    bool status = 4;
    string message = 5;
    string robot = 6;
    string device_id = 7;
    string data = 8;
    string request_id = 9;
    string organization = 10;
}

// Herd Service 
enum HerdActions {
    HERD_ACTION_UNKNOWN = 0;
    CREATE = 1;
    UPDATE = 2;
    DELETE = 3;
    START = 4;
    STOP = 5;
    RESTART = 6;
}

message HerdData {
    string slug_name = 1;
    string organization = 2;
    string token = 3;
}

message HerdServiceRequest {
    HerdActions action = 1;
    string device_id = 2;
    HerdData data = 3;
}

message HerdServiceResponseData {
    string slug_name = 1;
    string token = 2;
}

message HerdServiceResponse {
    bool status = 1;
    HerdServiceResponseData data = 2;
    string message = 3;
}

// RobotTelemetry service
message RobotTelemetryData {
    string slug_name = 1;
    string robot = 3;
    string device_id = 4;
    string data = 5;
}

message RobotTelemetryResponse {
    string slug_name = 1;
    string robot = 3;
    string device_id = 4;
    string data = 5;
    bool status = 6;
    string message = 7;
}

// HerdIQ Telemetry (fleet states, dispatch states)
enum HerdTelemetryActions {
    HERD_TELEMETRY_UNKNOWN = 0;
    FLEET_STATES = 1;
    DISAPTCH_STATES = 2;
}

message HerdTelemetryReqest {
    string slug_name = 1;
    HerdTelemetryActions action = 2;
    string data = 3;
    string organization = 4;
}

message HerdTelemetryResponse {
    string slug_name = 1;
    HerdTelemetryActions action = 2;
    string data = 3;
    bool status = 4;
    string message = 5;
    string organization = 6;
}

// Navigation telemetry stream
message HealthCheckRequest {
    string slug_name = 1;
    bool status = 5;
    string message = 6;
}

message HealthCheckResponse {
    string slug_name = 1;
    bool status = 5;
    string message = 6;
}

// Docker stats telemetry stream
message DockerTelemetryData {
    double cpu = 1;
    double memory = 2;
    string name = 3;
    string container_id = 4;
    uint64 num_of_procs = 6;
    uint64 current_pid = 7;
    string created_at = 8;
    string updated_at = 9;
    string version = 11;
}

message DockerTelemetryRequest {
    string slug_name = 1;
    bool status = 2;
    string message = 3;
}

message DockerTelemetryResponse {
    string slug_name = 1;
    DockerTelemetryData data = 2;
    bool status = 3;
    string message = 4;
}